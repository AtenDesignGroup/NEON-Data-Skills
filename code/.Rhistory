library(raster)
library(rhdf5)
packageVersion("rhdf5")
version
source("heep://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
update.packages()
library(raster)
library(rhdf5)
#make sure you have atleast rhdf5 version 2.10 installed
packageVersion("rhdf5")
#update rhdf5 if needed.
#source("http://bioconductor.org/biocLite.R")
#biocLite("rhdf5")
#specify the path to the H5 file. Notice that HDF5 extension can be either "hdf5" or "h5"
f <- '/Users/lwasser/Documents/Conferences/1_DataWorkshop_ESA2014/HDF5File/SJER_140123_chip.h5'
#f <- '/Users/law/Documents/data/SJER_140123_chip.h5'
#look at the HDF5 file structure. take note of the
#dimensions of the reflectance dataset (477 x 502 x 426)
# columns, rows and band
h5ls(f,all=T)
#r get spatial info and map info using the h5readAttributes function developed by Ted Hart
spinfo <- h5readAttributes(f,"spatialInfo")
wavelengths<- h5read(f,"wavelength",index=list(1:426,1))
#r extract "slices" of data from an HDF5 file (read in only the parts that you need)
b34<- h5read(f,"Reflectance",index=list(1:477,1:502,34))
#Convert from array to matrix
b34 <- b34[,,1]
#let's look at the dimensions of the b34 objects
#notice that the dimensions are 477 x 502
dim(b34)
refInfo <- h5readAttributes(f,"Reflectance")
b34<-t(b34)
#plot image
image(b34)
re(b34)
rm(b34)
b34<- h5read(f,"Reflectance",index=list(1:477,1:502,34))
#Convert from array to matrix
b34 <- b34[,,1]
image(log(b34))
library(raster)
library(rhdf5)
#make sure you have atleast rhdf5 version 2.10 installed
#packageVersion("rhdf5")
#update rhdf5 if needed.
#source("http://bioconductor.org/biocLite.R")
#biocLite("rhdf5")
#specify the path to the H5 file. Notice that HDF5 extension can be either "hdf5" or "h5"
#f <- '/Users/lwasser/Documents/Conferences/1_DataWorkshop_ESA2014/HDF5File/SJER_140123_chip.h5'
f <- '/Users/law/Documents/data/SJER_140123_chip.h5'
#look at the HDF5 file structure
h5ls(f,all=T)
#r get spatial info and map info using the h5readAttributes function developed by Ted Hart
spinfo <- h5readAttributes(f,"spatialInfo")
#Populate the raster image extent value.
#get the map info, split out elements
mapInfo<-h5read(f,"map info")
mapInfo<-unlist(strsplit(mapInfo, ","))
#Plot  RGB
# f: the hdf file
# band: the band you want to grab
# returns: a cleaned up HDF5 reflectance file
#create a function that processes multiple bands of data
getBandMat <- function(f, band){
out<- h5read(f,"Reflectance",index=list(1:477,1:502,band))
#Convert from array to matrix
out <- (out[,,1])
#transpose data to fix flipped row and column order
out <-t(out)
#assign data ignore values to NA
out[out > 14999] <- NA
return(out)
}
band2rast <- function(f,band){
#define the raster including the CRS (taken from SPINFO)
out <-  raster(getBandMat(f,band),crs=(spinfo$projdef))
#define extents of the data using metadata and matrix attributes
xMN=as.numeric(mapInfo[4])
xMX=(xMN+(ncol(out)))
yMN=as.numeric(mapInfo[5])
yMX=(yMN+(nrow(out)))
#set raster extent
rasExt <- extent(xMN,xMX,yMN,yMX)
#assign extent to raster
extent(out) <- rasExt
return(out)
}
stackList <- function(rastList){
## Creates a raster stack (multiple rasters in one file
# from a list of rasters
masterRaster <- stack(rastList[[1]])
for(i in 2:length(rastList)){
masterRaster<-  addLayer(masterRaster,rastList[[i]])
}
return(masterRaster)
}
#typical RGB bands
rgb <- list(58,34,19)
#color infrared (estimating landsat)
rgb <- list(90,34,19)
#false color (estimating landsat)
rgb <- list(58,34,19)
rgb_rast <- lapply(rgb,band2rast, f = f)
names(rgb_rast) <- as.character(rgb)
f <- '/Users/lwasser/Documents/Conferences/1_DataWorkshop_ESA2014/HDF5File/SJER_140123_chip.h5'
#f <- '/Users/law/Documents/data/SJER_140123_chip.h5'
#look at the HDF5 file structure
h5ls(f,all=T)
#r get spatial info and map info using the h5readAttributes function developed by Ted Hart
spinfo <- h5readAttributes(f,"spatialInfo")
#Populate the raster image extent value.
#get the map info, split out elements
mapInfo<-h5read(f,"map info")
mapInfo<-unlist(strsplit(mapInfo, ","))
#Plot  RGB
# f: the hdf file
# band: the band you want to grab
# returns: a cleaned up HDF5 reflectance file
#create a function that processes multiple bands of data
getBandMat <- function(f, band){
out<- h5read(f,"Reflectance",index=list(1:477,1:502,band))
#Convert from array to matrix
out <- (out[,,1])
#transpose data to fix flipped row and column order
out <-t(out)
#assign data ignore values to NA
out[out > 14999] <- NA
return(out)
}
band2rast <- function(f,band){
#define the raster including the CRS (taken from SPINFO)
out <-  raster(getBandMat(f,band),crs=(spinfo$projdef))
#define extents of the data using metadata and matrix attributes
xMN=as.numeric(mapInfo[4])
xMX=(xMN+(ncol(out)))
yMN=as.numeric(mapInfo[5])
yMX=(yMN+(nrow(out)))
#set raster extent
rasExt <- extent(xMN,xMX,yMN,yMX)
#assign extent to raster
extent(out) <- rasExt
return(out)
}
stackList <- function(rastList){
## Creates a raster stack (multiple rasters in one file
# from a list of rasters
masterRaster <- stack(rastList[[1]])
for(i in 2:length(rastList)){
masterRaster<-  addLayer(masterRaster,rastList[[i]])
}
return(masterRaster)
}
#typical RGB bands
rgb <- list(58,34,19)
rgb_rast <- lapply(rgb,band2rast, f = f)
names(rgb_rast) <- as.character(rgb)
### Check with a plot
plot(rgb_rast[[1]])
rgb_stack <- stackList(rgb_rast)
plot(rgb_stack)
plotRGB(rgb_stack,r=1,g=2,b=3, scale=300, stretch = "Lin")
f <- '/Users/lwasser/Documents/Conferences/1_DataWorkshop_ESA2014/HDF5File/SJER_140123_chip.h5'
h5ls(f,all=T)
#r get spatial info and map info using the h5readAttributes function developed by Ted Hart
spinfo <- h5readAttributes(f,"spatialInfo")
#read in the wavelength information from the Hdf5 file
wavelengths<- h5read(f,"wavelength",index=list(1:426,1))
#r extract "slices" of data from an HDF5 file (read in only the parts that you need)
b34<- h5read(f,"Reflectance",index=list(1:477,1:502,34))
#Convert from array to matrix
b34 <- b34[,,1]
image(b34)
image(log(b34))
plotRGB(b34)
plotRGB(b34r)
#Populate the raster image extent value.
#get the map info, split out elements
mapInfo<-h5read(f,"map info")
mapInfo<-unlist(strsplit(mapInfo, ","))
#define extents of the data using metadata and matrix attributes
xMN=as.numeric(mapInfo[4])
xMX=(xMN+(ncol(b34)))
yMN=as.numeric(mapInfo[5])
yMX=(yMN+(nrow(b34)))
rasExt <- extent(xMN,xMX,yMN,yMX)
#define final raster with projection info
b34r<-raster(b34,
crs=(spinfo$projdef))
#assign the spatial extent to the raster
extent(b34r) <- rasExt
image(b34r)
plotRGB(b34r)
options(stringsAsFactors=F, strip.white=T)
megapit <- read.csv("/Users/law/Documents/data/Soil_pit_data_20141113.csv", header=T, fill=T)
megapit <- read.csv("/Users/lwasser/Documents/data/Soil_pit_data_20141113.csv", header=T, fill=T)
# change column headers and stuff for functionality (Ed's headers are impossible)
# plus it looks like a bunch of longitudes are entered incorrectly? I haven't
# fixed them here, but a bunch are >0 and they should all be <0...
colnames(megapit)[c(3,4)] <- c("latitude","longitude")
megapit
megapit <- read.csv("/Users/lwasser/Documents/GitHub/biogeochemistryIPT/prototype_data/megapit/Soil_pit_data_20141113.csv", header=T, fill=T)
colnames(megapit)[c(3,4)] <- c("latitude","longitude")
colnames(megapit)[c(24,27,28)] <- c("horizon","top.depth","bottom.depth")
colnames(megapit)[c(91,121)] <- c("total.P", "total.N")
megapit$total.P <- megapit$total.P/1000
megapit$total.P
bottom.depth
megapit$bottom.depth
bottom.depth <- gsub(">","",megapit$bottom.depth)
bottom.depth
depth <- rowMeans(data.frame(cbind(megapit$top.depth, as.numeric(bottom.depth))))
depth
A.all <- megapit[grep("A", megapit$horizon),]
A.agg <- aggregate(A.all, by=list(A.all$Site), FUN=mean)
colnames(A.agg)[1] <- "site"
megapit$horizon
megapit$horizon[1]
megapit$horizon[2]
megapit$horizon[245]
megapit$horizon[244]
length(megapit$horizon)
dog=[megapit$horizon, megapit$bottom.depth]
dog=c(megapit$horizon, megapit$bottom.depth)
dog
a=(1,2,3)
a=c(1,2,3)
a
a=r(1,2,3)
a=rbind(1,2,3)
a
dog=rbind(megapit$horizon, megapit$bottom.depth)
dog
dog[1]
dog[2]
dog=cbind(megapit$horizon, megapit$bottom.depth)
dog
megapit$horizon[1:5]
megapit$horizon[1:245]
dog=cbind(megapit$horizon(1:244), megapit$bottom.depth(1:244))
megapit$horizon(1:244)
megapit$horizon[(]1:244]
dog=cbind(megapit$horizon[1:244], megapit$bottom.depth[1:244])
dog
colnames(megapit)[c(3,4)] <- c("latitude","longitude")
colnames(megapit)[c(24,27,28)] <- c("horizon","top.depth","bottom.depth")
colnames(megapit)[c(91,121)] <- c("total.P", "total.N")
megapit$total.P <- megapit$total.P/1000
bottom.depth <- gsub(">","",megapit$bottom.depth)
depth <- rowMeans(data.frame(cbind(megapit$top.depth, as.numeric(bottom.depth))))
# first: trying to get to an interesting one-number-per-site thing for the map
# extract all A horizons, then summarize by site (some sites have subhorizons within A)
A.all <- megapit[grep("A", megapit$horizon),]
A.agg <- aggregate(A.all, by=list(A.all$Site), FUN=mean)
colnames(A.agg)[1] <- "site"
barplot(A.agg$total.N, names.arg=A.agg$site, ylab="total N (g kg-1)")
barplot(A.agg$total.P, names.arg=A.agg$site, ylab="total P (g kg-1)")
NPrat <- A.agg$total.N/A.agg$total.P
barplot(NPrat, names.arg=A.agg$site, ylab="N:P ratio")
barplot(A.agg$total.N, names.arg=A.agg$site, ylab="total N (g kg-1)")
plot(NPrat~A.agg$latitude, pch=20, xlab="Latitude", ylab="N:P ratio")
warnings()
